def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystorePropertiesFile = file(String.valueOf(System.getenv("ANDROID_DEV_KEYPROPERTIES")))
if (!keystorePropertiesFile.isFile())
    keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 28

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.keyboardcrumbs.haclient"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['SIGN_KEY']
            keyPassword keystoreProperties['SIGN_KEYPASS']
            storeFile file(keystoreProperties['SIGN_STORE'])
            storePassword keystoreProperties['SIGN_STOREPASS']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }
}

flutter {
    source '../..'
}

ext {
    swagger_annotations_version = "1.5.0"
    gson_version = "2.3.1"
    volley_version = "1.1.0"
    junit_version = "4.12"
    robolectric_version = "3.0"
    concurrent_unit_version = "0.4.2"
}

dependencies {
    implementation 'com.google.firebase:firebase-core:16.0.8'
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    api('io.swagger:ha_api_client:1.0.0@aar')
            {
                transitive true
            }
    implementation 'org.osmdroid:osmdroid-android:6.1.0'

    // ha_client_api
    api "io.swagger:swagger-annotations:$swagger_annotations_version"
    api "com.google.code.gson:gson:$gson_version"
    api "com.android.volley:volley:${volley_version}"
    api group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.3.1'
}

apply plugin: 'com.google.gms.google-services'
